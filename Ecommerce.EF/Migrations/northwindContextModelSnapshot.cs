// <auto-generated />
using System;
using Ecommerce.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ecommerce.EF.Migrations
{
    [DbContext(typeof(northwindContext))]
    partial class northwindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Ecommerce.EF.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasColumnType("int(11)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("longblob");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasName("CategoryName");

                    b.ToTable("categories","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Customers", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("ImageThumbnail")
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("CustomerId");

                    b.HasIndex("City")
                        .HasName("City");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.HasIndex("Region")
                        .HasName("Region");

                    b.ToTable("customers","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Extension")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("HireDate");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("longblob");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TitleOfCourtesy")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("EmployeeId");

                    b.HasIndex("LastName")
                        .HasName("LastName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.ToTable("employees","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,4)")
                        .HasDefaultValueSql("0.0000");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("OrderId")
                        .HasName("OrderID");

                    b.HasIndex("ProductId")
                        .HasName("ProductID");

                    b.ToTable("order details","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,4)")
                        .HasDefaultValueSql("0.0000");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<DateTime?>("RequiredDate");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ShipCity")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ShipName")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ShipPostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("ShipVia")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ShippedDate");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId")
                        .HasName("CustomerID");

                    b.HasIndex("EmployeeId")
                        .HasName("EmployeeID");

                    b.HasIndex("OrderDate")
                        .HasName("OrderDate");

                    b.HasIndex("ShipPostalCode")
                        .HasName("ShipPostalCode");

                    b.HasIndex("ShippedDate")
                        .HasName("ShippedDate");

                    b.ToTable("orders","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int(11)");

                    b.Property<byte?>("Discontinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,4)")
                        .HasDefaultValueSql("0.0000");

                    b.Property<int?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("0");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId")
                        .HasName("CategoryID");

                    b.HasIndex("ProductName")
                        .HasName("ProductName");

                    b.HasIndex("SupplierId")
                        .HasName("SupplierID");

                    b.ToTable("products","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Shippers", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShipperID")
                        .HasColumnType("int(11)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.HasKey("ShipperId");

                    b.ToTable("shippers","northwind");
                });

            modelBuilder.Entity("Ecommerce.EF.Models.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("HomePage")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("SupplierId");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.ToTable("suppliers","northwind");
                });
#pragma warning restore 612, 618
        }
    }
}
